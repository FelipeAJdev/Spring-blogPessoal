name: CI/CD Pipeline  # Nome do pipeline de CI/CD

on:
  push:
    branches:
      - main  # Dispara a pipeline sempre que houver um push na branch 'main'

jobs:
  run_test:
    name: CI - Testes da Aplicação  # Definição do trabalho de execução dos testes
    runs-on: ubuntu-22.04  # Define o ambiente onde o trabalho será executado (Ubuntu 22.04)
    steps:
      - run: echo "Iniciando a execução dos Testes"  # Exibe uma mensagem indicando o início dos testes
      - uses: actions/checkout@v3  # Faz o checkout do código do repositório para o ambiente de execução
      - name: Setup JDK 17
        uses: actions/setup-java@v3  # Configura o JDK 17 no ambiente
        with:
         java-version: 17
         distribution: 'adopt'  # Define a distribuição do JDK
      - name: Maven Verify  
        run: mvn clean verify  # Executa o Maven para verificar a integridade do projeto e rodar os testes
      - name: Test with Maven
        run: mvn -B test --file pom.xml  # Executa os testes de unidade com Maven no arquivo pom.xml

  run_build:
   name: CI - Build da aplicação  # Definição do trabalho de construção da aplicação
   runs-on: ubuntu-22.04  # Define o ambiente de execução (Ubuntu 22.04)
   needs: run_test  # Este trabalho depende da conclusão bem-sucedida do trabalho de testes
   steps:
    - run: echo "Iniciando a construção do Pacote da Aplicação"  # Exibe uma mensagem indicando o início da construção do pacote
    - uses: actions/checkout@v3  # Faz o checkout do código do repositório
    - name: Setup JDK 17
      uses: actions/setup-java@v3  # Configura o JDK 17 no ambiente
      with:
        java-version: 17
        distribution: 'adopt'
    - name: Maven Build
      run: mvn clean package -Dmaven.test.skip=true  # Executa o build do projeto com Maven, ignorando os testes
    - name: Login to docker hub
      uses: docker/login-action@v2.1.0  # Faz login no Docker Hub usando as credenciais armazenadas como segredo
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}  # Nome de usuário armazenado como segredo
        password: ${{ secrets.DOCKERHUB_TOKEN }}  # Token do Docker Hub armazenado como segredo
    - name: Build docker image
      uses: docker/build-push-action@v3.2.0  # Constrói e envia a imagem Docker para o Docker Hub
      with:
        context: .  # Define o contexto de construção (diretório atual)
        push: true  # Envia a imagem para o Docker Hub
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/hellocicd:${{ github.run_number }}  # Tag para a imagem com o número da execução
          ${{ secrets.DOCKERHUB_USERNAME }}/hellocicd:latest  # Tag mais recente para a imagem

  run_deploy:
    name: CD - Deploy no Render  # Definição do trabalho de deploy
    runs-on: ubuntu-22.04  # Define o ambiente de execução (Ubuntu 22.04)
    needs: run_build  # Este trabalho depende da conclusão bem-sucedida do trabalho de build
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8  # Utiliza a ação para fazer o deploy no serviço Render
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}  # ID do serviço Render armazenado como segredo
          api-key: ${{ secrets.RENDER_API_KEY }}  # Chave de API do Render armazenada como segredo
